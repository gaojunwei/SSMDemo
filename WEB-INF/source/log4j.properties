#log4j使用配置参考网址：http://www.cnblogs.com/ITEagle/archive/2010/04/23/1718365.html
#优先级从高到低分别是FATAL, ERROR、WARN、INFO、DEBUG

#DEBUG Level指出细粒度信息事件对调试应用程序是非常有帮助的。
#INFO level表明 消息在粗粒度级别上突出强调应用程序的运行过程。
#WARN level表明会出现潜在错误的情形。
#ERROR level指出虽然发生错误事件，但仍然不影响系统的继续运行。
#FATAL level指出每个严重的错误事件将会导致应用程序的退出。

#设置日志输出的级别
log4j.rootLogger=DEBUG,console,A2,E

### 输出到控制台 ###
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.Target = System.out
log4j.appender.console.layout.ConversionPattern=%d{yyyy-MM-dd} %d{ABSOLUTE} [%t] %-3p %c %x - %m%n

#com.opensymphony.xwork2.ognl.OgnlValueStack - Error struct2报错的解决方法
#log4j.logger.com.opensymphony.xwork2=ERROR


### 输出到日志文件 ###
#org.apache.log4j.HTMLLayout（以HTML表格形式布局）
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）

log4j.appender.A2=org.apache.log4j.DailyRollingFileAppender
log4j.appender.A2.file=d:/logs/ssm/swike.log
log4j.appender.A2.datePattern='.'yyyy-MM-dd'.log'
#append默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。
log4j.appender.A2.append=true
#log4j.appender.A2.Threshold=ALL
log4j.appender.A2.layout=org.apache.log4j.PatternLayout
log4j.appender.A2.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c %x - %m%n

### 保存异常信息到单独文件 ###
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File = d:/logs/ssm/ssm_error/error.log
log4j.appender.E.datePattern='.'yyyy-MM-dd'.log'
log4j.appender.E.Append = true
##只输出ERROR级别以上的日志!!!
log4j.appender.E.Threshold = ERROR
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c %x - %m%n

